-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser.y
-----------------------------------------------------------------------------


terminal ',' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> Decl                                    (1)
	Program -> Program Decl                            (2)
	Decl -> fn var '(' ')' '{' Statements '}'          (3)
	Decl -> state var '{' Statements '}'               (4)
	Statements -> Statement                            (5)
	Statements -> Statements Statement                 (6)
	Statement -> if '(' Condition ')' '{' Statements '}'   (7)
	Statement -> if '(' Condition ')' '{' Statements '}' else '{' Statements '}'   (8)
	Statement -> mark int ';'                          (9)
	Statement -> unmark int ';'                        (10)
	Statement -> pickup '{' Statements '}'             (11)
	Statement -> drop ';'                              (12)
	Statement -> pass ';'                              (13)
	Statement -> switch var ';'                        (14)
	Statement -> turn Dir ';'                          (15)
	Statement -> move '{' Statements '}'               (16)
	Statement -> var '(' ')' ';'                       (17)
	Condition -> Condition '&&' Condition              (18)
	Condition -> Condition '||' Condition              (19)
	Condition -> '(' Condition ')'                     (20)
	Condition -> Flag SenseDir                         (21)
	Condition -> rand '(' int ')'                      (22)
	SenseDir -> ahead                                  (23)
	SenseDir -> here                                   (24)
	SenseDir -> leftAhead                              (25)
	SenseDir -> rightAhead                             (26)
	Flag -> friend                                     (27)
	Flag -> foe                                        (28)
	Flag -> friendWithFood                             (29)
	Flag -> foeWithFood                                (30)
	Flag -> rock                                       (31)
	Flag -> food                                       (32)
	Flag -> marker                                     (33)
	Flag -> foeMarker                                  (34)
	Flag -> home                                       (35)
	Flag -> foeHome                                    (36)
	Dir -> left                                        (37)
	Dir -> right                                       (38)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'{'            { TLBrace }
	'}'            { TRBrace }
	'('            { TLPar }
	')'            { TRPar }
	','            { TComma }
	';'            { TSemicolon }
	'&&'           { TAnd }
	'||'           { TOr }
	fn             { TFn }
	state          { TState }
	if             { TIf }
	else           { TElse }
	mark           { TMark }
	unmark         { TUnmark }
	pickup         { TPickup }
	drop           { TDrop }
	turn           { TTurn }
	move           { TMove }
	rand           { TRand }
	pass           { TPass }
	switch         { TSwitch }
	int            { TInt $$ }
	var            { TVar $$ }
	ahead          { TAhead }
	here           { THere }
	leftAhead      { TLeftAhead }
	rightAhead     { TRightAhead }
	friend         { TFriend }
	foe            { TFoe }
	friendWithFood { TFriendWithFood }
	foeWithFood    { TFoeWithFood }
	rock           { TRock }
	food           { TFood }
	marker         { TMarker $$ }
	foeMarker      { TFoeMarker }
	home           { THome }
	foeHome        { TFoeHome }
	left           { TLeft }
	right          { TRight }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rules 1, 2
	Decl            rules 3, 4
	Statements      rules 5, 6
	Statement       rules 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
	Condition       rules 18, 19, 20, 21, 22
	SenseDir        rules 23, 24, 25, 26
	Flag            rules 27, 28, 29, 30, 31, 32, 33, 34, 35, 36
	Dir             rules 37, 38

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . Program                           (rule 0)

	fn             shift, and enter state 3
	state          shift, and enter state 4

	Program        goto state 5
	Decl           goto state 2

State 1

	Program -> . Decl                                   (rule 1)

	fn             shift, and enter state 3
	state          shift, and enter state 4

	Decl           goto state 2

State 2

	Program -> Decl .                                   (rule 1)

	fn             reduce using rule 1
	state          reduce using rule 1
	%eof           reduce using rule 1


State 3

	Decl -> fn . var '(' ')' '{' Statements '}'         (rule 3)

	var            shift, and enter state 8


State 4

	Decl -> state . var '{' Statements '}'              (rule 4)

	var            shift, and enter state 7


State 5

	%start_parse -> Program .                           (rule 0)
	Program -> Program . Decl                           (rule 2)

	fn             shift, and enter state 3
	state          shift, and enter state 4
	%eof           accept

	Decl           goto state 6

State 6

	Program -> Program Decl .                           (rule 2)

	fn             reduce using rule 2
	state          reduce using rule 2
	%eof           reduce using rule 2


State 7

	Decl -> state var . '{' Statements '}'              (rule 4)

	'{'            shift, and enter state 10


State 8

	Decl -> fn var . '(' ')' '{' Statements '}'         (rule 3)

	'('            shift, and enter state 9


State 9

	Decl -> fn var '(' . ')' '{' Statements '}'         (rule 3)

	')'            shift, and enter state 23


State 10

	Decl -> state var '{' . Statements '}'              (rule 4)

	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statements     goto state 11
	Statement      goto state 12

State 11

	Decl -> state var '{' Statements . '}'              (rule 4)
	Statements -> Statements . Statement                (rule 6)

	'}'            shift, and enter state 38
	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statement      goto state 37

State 12

	Statements -> Statement .                           (rule 5)

	'}'            reduce using rule 5
	if             reduce using rule 5
	mark           reduce using rule 5
	unmark         reduce using rule 5
	pickup         reduce using rule 5
	drop           reduce using rule 5
	turn           reduce using rule 5
	move           reduce using rule 5
	pass           reduce using rule 5
	switch         reduce using rule 5
	var            reduce using rule 5


State 13

	Statement -> if . '(' Condition ')' '{' Statements '}'    (rule 7)
	Statement -> if . '(' Condition ')' '{' Statements '}' else '{' Statements '}'    (rule 8)

	'('            shift, and enter state 36


State 14

	Statement -> mark . int ';'                         (rule 9)

	int            shift, and enter state 35


State 15

	Statement -> unmark . int ';'                       (rule 10)

	int            shift, and enter state 34


State 16

	Statement -> pickup . '{' Statements '}'            (rule 11)

	'{'            shift, and enter state 33


State 17

	Statement -> drop . ';'                             (rule 12)

	';'            shift, and enter state 32


State 18

	Statement -> turn . Dir ';'                         (rule 15)

	left           shift, and enter state 30
	right          shift, and enter state 31

	Dir            goto state 29

State 19

	Statement -> move . '{' Statements '}'              (rule 16)

	'{'            shift, and enter state 28


State 20

	Statement -> pass . ';'                             (rule 13)

	';'            shift, and enter state 27


State 21

	Statement -> switch . var ';'                       (rule 14)

	var            shift, and enter state 26


State 22

	Statement -> var . '(' ')' ';'                      (rule 17)

	'('            shift, and enter state 25


State 23

	Decl -> fn var '(' ')' . '{' Statements '}'         (rule 3)

	'{'            shift, and enter state 24


State 24

	Decl -> fn var '(' ')' '{' . Statements '}'         (rule 3)

	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statements     goto state 60
	Statement      goto state 12

State 25

	Statement -> var '(' . ')' ';'                      (rule 17)

	')'            shift, and enter state 59


State 26

	Statement -> switch var . ';'                       (rule 14)

	';'            shift, and enter state 58


State 27

	Statement -> pass ';' .                             (rule 13)

	'}'            reduce using rule 13
	if             reduce using rule 13
	mark           reduce using rule 13
	unmark         reduce using rule 13
	pickup         reduce using rule 13
	drop           reduce using rule 13
	turn           reduce using rule 13
	move           reduce using rule 13
	pass           reduce using rule 13
	switch         reduce using rule 13
	var            reduce using rule 13


State 28

	Statement -> move '{' . Statements '}'              (rule 16)

	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statements     goto state 57
	Statement      goto state 12

State 29

	Statement -> turn Dir . ';'                         (rule 15)

	';'            shift, and enter state 56


State 30

	Dir -> left .                                       (rule 37)

	';'            reduce using rule 37


State 31

	Dir -> right .                                      (rule 38)

	';'            reduce using rule 38


State 32

	Statement -> drop ';' .                             (rule 12)

	'}'            reduce using rule 12
	if             reduce using rule 12
	mark           reduce using rule 12
	unmark         reduce using rule 12
	pickup         reduce using rule 12
	drop           reduce using rule 12
	turn           reduce using rule 12
	move           reduce using rule 12
	pass           reduce using rule 12
	switch         reduce using rule 12
	var            reduce using rule 12


State 33

	Statement -> pickup '{' . Statements '}'            (rule 11)

	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statements     goto state 55
	Statement      goto state 12

State 34

	Statement -> unmark int . ';'                       (rule 10)

	';'            shift, and enter state 54


State 35

	Statement -> mark int . ';'                         (rule 9)

	';'            shift, and enter state 53


State 36

	Statement -> if '(' . Condition ')' '{' Statements '}'    (rule 7)
	Statement -> if '(' . Condition ')' '{' Statements '}' else '{' Statements '}'    (rule 8)

	'('            shift, and enter state 41
	rand           shift, and enter state 42
	friend         shift, and enter state 43
	foe            shift, and enter state 44
	friendWithFood shift, and enter state 45
	foeWithFood    shift, and enter state 46
	rock           shift, and enter state 47
	food           shift, and enter state 48
	marker         shift, and enter state 49
	foeMarker      shift, and enter state 50
	home           shift, and enter state 51
	foeHome        shift, and enter state 52

	Condition      goto state 39
	Flag           goto state 40

State 37

	Statements -> Statements Statement .                (rule 6)

	'}'            reduce using rule 6
	if             reduce using rule 6
	mark           reduce using rule 6
	unmark         reduce using rule 6
	pickup         reduce using rule 6
	drop           reduce using rule 6
	turn           reduce using rule 6
	move           reduce using rule 6
	pass           reduce using rule 6
	switch         reduce using rule 6
	var            reduce using rule 6


State 38

	Decl -> state var '{' Statements '}' .              (rule 4)

	fn             reduce using rule 4
	state          reduce using rule 4
	%eof           reduce using rule 4


State 39

	Statement -> if '(' Condition . ')' '{' Statements '}'    (rule 7)
	Statement -> if '(' Condition . ')' '{' Statements '}' else '{' Statements '}'    (rule 8)
	Condition -> Condition . '&&' Condition             (rule 18)
	Condition -> Condition . '||' Condition             (rule 19)

	')'            shift, and enter state 72
	'&&'           shift, and enter state 73
	'||'           shift, and enter state 74


State 40

	Condition -> Flag . SenseDir                        (rule 21)

	ahead          shift, and enter state 68
	here           shift, and enter state 69
	leftAhead      shift, and enter state 70
	rightAhead     shift, and enter state 71

	SenseDir       goto state 67

State 41

	Condition -> '(' . Condition ')'                    (rule 20)

	'('            shift, and enter state 41
	rand           shift, and enter state 42
	friend         shift, and enter state 43
	foe            shift, and enter state 44
	friendWithFood shift, and enter state 45
	foeWithFood    shift, and enter state 46
	rock           shift, and enter state 47
	food           shift, and enter state 48
	marker         shift, and enter state 49
	foeMarker      shift, and enter state 50
	home           shift, and enter state 51
	foeHome        shift, and enter state 52

	Condition      goto state 66
	Flag           goto state 40

State 42

	Condition -> rand . '(' int ')'                     (rule 22)

	'('            shift, and enter state 65


State 43

	Flag -> friend .                                    (rule 27)

	ahead          reduce using rule 27
	here           reduce using rule 27
	leftAhead      reduce using rule 27
	rightAhead     reduce using rule 27


State 44

	Flag -> foe .                                       (rule 28)

	ahead          reduce using rule 28
	here           reduce using rule 28
	leftAhead      reduce using rule 28
	rightAhead     reduce using rule 28


State 45

	Flag -> friendWithFood .                            (rule 29)

	ahead          reduce using rule 29
	here           reduce using rule 29
	leftAhead      reduce using rule 29
	rightAhead     reduce using rule 29


State 46

	Flag -> foeWithFood .                               (rule 30)

	ahead          reduce using rule 30
	here           reduce using rule 30
	leftAhead      reduce using rule 30
	rightAhead     reduce using rule 30


State 47

	Flag -> rock .                                      (rule 31)

	ahead          reduce using rule 31
	here           reduce using rule 31
	leftAhead      reduce using rule 31
	rightAhead     reduce using rule 31


State 48

	Flag -> food .                                      (rule 32)

	ahead          reduce using rule 32
	here           reduce using rule 32
	leftAhead      reduce using rule 32
	rightAhead     reduce using rule 32


State 49

	Flag -> marker .                                    (rule 33)

	ahead          reduce using rule 33
	here           reduce using rule 33
	leftAhead      reduce using rule 33
	rightAhead     reduce using rule 33


State 50

	Flag -> foeMarker .                                 (rule 34)

	ahead          reduce using rule 34
	here           reduce using rule 34
	leftAhead      reduce using rule 34
	rightAhead     reduce using rule 34


State 51

	Flag -> home .                                      (rule 35)

	ahead          reduce using rule 35
	here           reduce using rule 35
	leftAhead      reduce using rule 35
	rightAhead     reduce using rule 35


State 52

	Flag -> foeHome .                                   (rule 36)

	ahead          reduce using rule 36
	here           reduce using rule 36
	leftAhead      reduce using rule 36
	rightAhead     reduce using rule 36


State 53

	Statement -> mark int ';' .                         (rule 9)

	'}'            reduce using rule 9
	if             reduce using rule 9
	mark           reduce using rule 9
	unmark         reduce using rule 9
	pickup         reduce using rule 9
	drop           reduce using rule 9
	turn           reduce using rule 9
	move           reduce using rule 9
	pass           reduce using rule 9
	switch         reduce using rule 9
	var            reduce using rule 9


State 54

	Statement -> unmark int ';' .                       (rule 10)

	'}'            reduce using rule 10
	if             reduce using rule 10
	mark           reduce using rule 10
	unmark         reduce using rule 10
	pickup         reduce using rule 10
	drop           reduce using rule 10
	turn           reduce using rule 10
	move           reduce using rule 10
	pass           reduce using rule 10
	switch         reduce using rule 10
	var            reduce using rule 10


State 55

	Statements -> Statements . Statement                (rule 6)
	Statement -> pickup '{' Statements . '}'            (rule 11)

	'}'            shift, and enter state 64
	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statement      goto state 37

State 56

	Statement -> turn Dir ';' .                         (rule 15)

	'}'            reduce using rule 15
	if             reduce using rule 15
	mark           reduce using rule 15
	unmark         reduce using rule 15
	pickup         reduce using rule 15
	drop           reduce using rule 15
	turn           reduce using rule 15
	move           reduce using rule 15
	pass           reduce using rule 15
	switch         reduce using rule 15
	var            reduce using rule 15


State 57

	Statements -> Statements . Statement                (rule 6)
	Statement -> move '{' Statements . '}'              (rule 16)

	'}'            shift, and enter state 63
	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statement      goto state 37

State 58

	Statement -> switch var ';' .                       (rule 14)

	'}'            reduce using rule 14
	if             reduce using rule 14
	mark           reduce using rule 14
	unmark         reduce using rule 14
	pickup         reduce using rule 14
	drop           reduce using rule 14
	turn           reduce using rule 14
	move           reduce using rule 14
	pass           reduce using rule 14
	switch         reduce using rule 14
	var            reduce using rule 14


State 59

	Statement -> var '(' ')' . ';'                      (rule 17)

	';'            shift, and enter state 62


State 60

	Decl -> fn var '(' ')' '{' Statements . '}'         (rule 3)
	Statements -> Statements . Statement                (rule 6)

	'}'            shift, and enter state 61
	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statement      goto state 37

State 61

	Decl -> fn var '(' ')' '{' Statements '}' .         (rule 3)

	fn             reduce using rule 3
	state          reduce using rule 3
	%eof           reduce using rule 3


State 62

	Statement -> var '(' ')' ';' .                      (rule 17)

	'}'            reduce using rule 17
	if             reduce using rule 17
	mark           reduce using rule 17
	unmark         reduce using rule 17
	pickup         reduce using rule 17
	drop           reduce using rule 17
	turn           reduce using rule 17
	move           reduce using rule 17
	pass           reduce using rule 17
	switch         reduce using rule 17
	var            reduce using rule 17


State 63

	Statement -> move '{' Statements '}' .              (rule 16)

	'}'            reduce using rule 16
	if             reduce using rule 16
	mark           reduce using rule 16
	unmark         reduce using rule 16
	pickup         reduce using rule 16
	drop           reduce using rule 16
	turn           reduce using rule 16
	move           reduce using rule 16
	pass           reduce using rule 16
	switch         reduce using rule 16
	var            reduce using rule 16


State 64

	Statement -> pickup '{' Statements '}' .            (rule 11)

	'}'            reduce using rule 11
	if             reduce using rule 11
	mark           reduce using rule 11
	unmark         reduce using rule 11
	pickup         reduce using rule 11
	drop           reduce using rule 11
	turn           reduce using rule 11
	move           reduce using rule 11
	pass           reduce using rule 11
	switch         reduce using rule 11
	var            reduce using rule 11


State 65

	Condition -> rand '(' . int ')'                     (rule 22)

	int            shift, and enter state 79


State 66

	Condition -> Condition . '&&' Condition             (rule 18)
	Condition -> Condition . '||' Condition             (rule 19)
	Condition -> '(' Condition . ')'                    (rule 20)

	')'            shift, and enter state 78
	'&&'           shift, and enter state 73
	'||'           shift, and enter state 74


State 67

	Condition -> Flag SenseDir .                        (rule 21)

	')'            reduce using rule 21
	'&&'           reduce using rule 21
	'||'           reduce using rule 21


State 68

	SenseDir -> ahead .                                 (rule 23)

	')'            reduce using rule 23
	'&&'           reduce using rule 23
	'||'           reduce using rule 23


State 69

	SenseDir -> here .                                  (rule 24)

	')'            reduce using rule 24
	'&&'           reduce using rule 24
	'||'           reduce using rule 24


State 70

	SenseDir -> leftAhead .                             (rule 25)

	')'            reduce using rule 25
	'&&'           reduce using rule 25
	'||'           reduce using rule 25


State 71

	SenseDir -> rightAhead .                            (rule 26)

	')'            reduce using rule 26
	'&&'           reduce using rule 26
	'||'           reduce using rule 26


State 72

	Statement -> if '(' Condition ')' . '{' Statements '}'    (rule 7)
	Statement -> if '(' Condition ')' . '{' Statements '}' else '{' Statements '}'    (rule 8)

	'{'            shift, and enter state 77


State 73

	Condition -> Condition '&&' . Condition             (rule 18)

	'('            shift, and enter state 41
	rand           shift, and enter state 42
	friend         shift, and enter state 43
	foe            shift, and enter state 44
	friendWithFood shift, and enter state 45
	foeWithFood    shift, and enter state 46
	rock           shift, and enter state 47
	food           shift, and enter state 48
	marker         shift, and enter state 49
	foeMarker      shift, and enter state 50
	home           shift, and enter state 51
	foeHome        shift, and enter state 52

	Condition      goto state 76
	Flag           goto state 40

State 74

	Condition -> Condition '||' . Condition             (rule 19)

	'('            shift, and enter state 41
	rand           shift, and enter state 42
	friend         shift, and enter state 43
	foe            shift, and enter state 44
	friendWithFood shift, and enter state 45
	foeWithFood    shift, and enter state 46
	rock           shift, and enter state 47
	food           shift, and enter state 48
	marker         shift, and enter state 49
	foeMarker      shift, and enter state 50
	home           shift, and enter state 51
	foeHome        shift, and enter state 52

	Condition      goto state 75
	Flag           goto state 40

State 75

	Condition -> Condition . '&&' Condition             (rule 18)
	Condition -> Condition . '||' Condition             (rule 19)
	Condition -> Condition '||' Condition .             (rule 19)

	')'            reduce using rule 19
	'&&'           shift, and enter state 73
	'||'           reduce using rule 19


State 76

	Condition -> Condition . '&&' Condition             (rule 18)
	Condition -> Condition '&&' Condition .             (rule 18)
	Condition -> Condition . '||' Condition             (rule 19)

	')'            reduce using rule 18
	'&&'           reduce using rule 18
	'||'           reduce using rule 18


State 77

	Statement -> if '(' Condition ')' '{' . Statements '}'    (rule 7)
	Statement -> if '(' Condition ')' '{' . Statements '}' else '{' Statements '}'    (rule 8)

	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statements     goto state 81
	Statement      goto state 12

State 78

	Condition -> '(' Condition ')' .                    (rule 20)

	')'            reduce using rule 20
	'&&'           reduce using rule 20
	'||'           reduce using rule 20


State 79

	Condition -> rand '(' int . ')'                     (rule 22)

	')'            shift, and enter state 80


State 80

	Condition -> rand '(' int ')' .                     (rule 22)

	')'            reduce using rule 22
	'&&'           reduce using rule 22
	'||'           reduce using rule 22


State 81

	Statements -> Statements . Statement                (rule 6)
	Statement -> if '(' Condition ')' '{' Statements . '}'    (rule 7)
	Statement -> if '(' Condition ')' '{' Statements . '}' else '{' Statements '}'    (rule 8)

	'}'            shift, and enter state 82
	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statement      goto state 37

State 82

	Statement -> if '(' Condition ')' '{' Statements '}' .    (rule 7)
	Statement -> if '(' Condition ')' '{' Statements '}' . else '{' Statements '}'    (rule 8)

	'}'            reduce using rule 7
	if             reduce using rule 7
	else           shift, and enter state 83
	mark           reduce using rule 7
	unmark         reduce using rule 7
	pickup         reduce using rule 7
	drop           reduce using rule 7
	turn           reduce using rule 7
	move           reduce using rule 7
	pass           reduce using rule 7
	switch         reduce using rule 7
	var            reduce using rule 7


State 83

	Statement -> if '(' Condition ')' '{' Statements '}' else . '{' Statements '}'    (rule 8)

	'{'            shift, and enter state 84


State 84

	Statement -> if '(' Condition ')' '{' Statements '}' else '{' . Statements '}'    (rule 8)

	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statements     goto state 85
	Statement      goto state 12

State 85

	Statements -> Statements . Statement                (rule 6)
	Statement -> if '(' Condition ')' '{' Statements '}' else '{' Statements . '}'    (rule 8)

	'}'            shift, and enter state 86
	if             shift, and enter state 13
	mark           shift, and enter state 14
	unmark         shift, and enter state 15
	pickup         shift, and enter state 16
	drop           shift, and enter state 17
	turn           shift, and enter state 18
	move           shift, and enter state 19
	pass           shift, and enter state 20
	switch         shift, and enter state 21
	var            shift, and enter state 22

	Statement      goto state 37

State 86

	Statement -> if '(' Condition ')' '{' Statements '}' else '{' Statements '}' .    (rule 8)

	'}'            reduce using rule 8
	if             reduce using rule 8
	mark           reduce using rule 8
	unmark         reduce using rule 8
	pickup         reduce using rule 8
	drop           reduce using rule 8
	turn           reduce using rule 8
	move           reduce using rule 8
	pass           reduce using rule 8
	switch         reduce using rule 8
	var            reduce using rule 8


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 39
Number of terminals: 39
Number of non-terminals: 9
Number of states: 87
